#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Breaking a Repeating Key XOR cipher
\end_layout

\begin_layout Abstract
The XOR cipher is the simpliest symmetric cipher, simply take a known key
 of some length that is shared between the two parties.
 When encrypting if the plain text to be encrypted is longer than the key,
 then simply repeat the key to match the length.
 The XOR operation and how we break serve as corner stones for future encyption
 algorithms and attacks.
 Thus here we go over the details of this cipher and the attack to break
 it.
\end_layout

\begin_layout Section
Repeating Key XOR
\end_layout

\begin_layout Standard
Here we go over the details of a repreating key XOR.
 We define the plain text as a sequence of integers ranging from 0 to 255
 i.e.
 
\begin_inset Formula $p=(p_{0},...,p_{n-1})$
\end_inset

 such that 
\begin_inset Formula $0\leq p_{i}<256$
\end_inset

 i.e the plain text is brokein into bytes.
 We will make the assumption that the plain text is ASCII encoded english.
 Now the XOR operation operates on each bit of each byte such that the output
 is a logical 1 iff the input are not the same.
 So if both inputs are 0 or both inputs are 1 the output is 0, else the
 output is 1.
 We use the following notation to represent the XOR operation, 
\begin_inset Formula $a\otimes b$
\end_inset

.
 The inputs 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 can be integers of any size.
 The output is then defined as operating on each bit of the binary represemtatio
n of the inputs.
\end_layout

\begin_layout Standard
Now we define a key to be again just be a sequence of bytes, 
\begin_inset Formula $k=(k_{0},...,k_{m-1})$
\end_inset

 such that 
\begin_inset Formula $0\leq k_{i}<256$
\end_inset

, shared between the two parties exchanging messages.
 Finally the cipher text is defined as the sequence of bytes 
\begin_inset Formula $c=(c_{0},...,c_{n-1})$
\end_inset

 where 
\begin_inset Formula $0\leq c_{i}<256$
\end_inset

 such that 
\begin_inset Formula $c_{i}=p_{i}\otimes k_{i}$
\end_inset

.
 Usually the length of the key is less than that of the text, so the key
 is just repeated and truncated to match the length of the input.
 The calculation of the cipher text is called encyption.
 
\end_layout

\begin_layout Standard
Given a cipher text, calculating the plaintext that produced the given cipher
 text is called decryption.
 To decrypt, we can simply use the fact that the XOR is its own inverse
 and 0 is the identity of the XOR operation.
 In other words, 
\begin_inset Formula $a\otimes a=0$
\end_inset

 and 
\begin_inset Formula $a\otimes0=a$
\end_inset

.
 Using this and the defintion of the cipher text, 
\begin_inset Formula $c_{i}=p_{i}\otimes k_{i}$
\end_inset

, tells us that 
\begin_inset Formula $p_{i}=c_{i}\otimes k_{i}$
\end_inset

.
 Note that the XOR operation is commutative i.e.
 
\begin_inset Formula $a\otimes b=b\otimes a$
\end_inset

.
\end_layout

\begin_layout Standard
As a final note, we would like to discuss why the XOR operation is used
 in encyption.
 First off, unlike other binary operations the XOR operation is invertible
 i.e.
 if we know the key and one of the plain text or cipher text we can uniquely
 recover the other.
 Also it has the property of being 
\begin_inset Quotes eld
\end_inset

perfectly
\begin_inset Quotes erd
\end_inset

 balanced.
 Suppose we know only the cipher text and no nothing about the key.
 Now a given cipher text value of 1 or 0 tells us nothing about the input
 i.e.
 there is a 50% chance the input is 1 and 50% that it is a 0.
 Also the XOR operation is fast to compute.
 These are the main reasons that the XOR operation is a core operation in
 almost all encyption algorithms.
\end_layout

\begin_layout Standard
As an actual final note, if you have a truely secret key whose length is
 greater than that of the input and you never resuse that key, then the
 XOR cipher simply becomes a one time pad which is unbreakable in theory.
 Since we assume the input is much longer that of the key, the key will
 get reused repreatly.
 This combined with the fact that we have knowledge as to what the plain
 text is what allows this cipher to be broken fairly easily as we will see.
\end_layout

\begin_layout Section
Finding the Key Size
\end_layout

\begin_layout Standard
Now the fun part, if Alice and Bob are communicating using repeating key
 XOR and we snoop their conversation can we, only knowing the cipher text,
 find out what the plain text is? The first step in doing this is determining
 the key length.
 First some notation, let 
\begin_inset Formula $A,B$
\end_inset

 be two english letters encoded in ASCII.
 Now for this analysis we assume that 
\begin_inset Formula $A,B$
\end_inset

 are random variables that follow the english letter character frequency.
 This distribution and all subsequent calculations are found in expected_hamming.
py.
 Now let 
\begin_inset Formula $X,Y$
\end_inset

 be two random bytes with a uniform distribution.
 Finally, we define the function 
\begin_inset Formula $w(b)$
\end_inset

 to be the number of 1's in the binary notation of the byte 
\begin_inset Formula $b$
\end_inset

.
 We call this the weight function.
 We define this function as the following where 
\begin_inset Formula $b_{i}$
\end_inset

 is the binary representation of 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
w(b)=\sum_{i}b_{i}
\]

\end_inset


\end_layout

\begin_layout Standard
Now consider the expected value of 
\begin_inset Formula $w(X)$
\end_inset

, that is the number of 1's in a random byte.
 This value is clearly 4, i.e.
 
\begin_inset Formula $\mathbb{E}[w(X)]=4$
\end_inset

.
 We claim that 
\begin_inset Formula $\mathbb{E}[w(X\otimes C)]$
\end_inset

 where 
\begin_inset Formula $C$
\end_inset

 is a byte with any distribution is also 4.
 To prove this, we look at a single bit of each byte.
 Let 
\begin_inset Formula $X_{i}$
\end_inset

 and 
\begin_inset Formula $C_{i}$
\end_inset

 the 
\begin_inset Formula $i$
\end_inset

th bit with in these bytes.
 We know that ,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{E}[w(X\otimes C)]=\mathbb{E}[\sum_{i}X_{i}\otimes C_{i}]=\sum_{i}\mathbb{E}[X_{i}\otimes C_{i}]
\]

\end_inset


\end_layout

\begin_layout Standard
since XOR operates on a single bit independantly of the other bits and since
 both the sum and expected value are linear.
 Now 
\begin_inset Formula $C_{i}$
\end_inset

 simply has some probability of being a 1 and some probability of being
 a 0, let these be 
\begin_inset Formula $p_{0}$
\end_inset

 and 
\begin_inset Formula $p_{1}$
\end_inset

.
 For 
\begin_inset Formula $X$
\end_inset

 these are simply .5 since its uniformly random.
 So 
\begin_inset Formula $\mathbb{E}[X_{i}\otimes C_{i}]=.5p_{0}+.5p_{1}=.5$
\end_inset

.
 So we know 
\begin_inset Formula $\mathbb{E}[w(X\otimes C)]=4$
\end_inset

.
 So we can make the claim that the expected number of 1s in a byte whose
 value is the XOR of a random byte with a byte from another distribution
 is 4.
\end_layout

\begin_layout Standard
Now we need one more fact before we can present a way of finding the key
 size.
 So consider 
\begin_inset Formula $\mathbb{E}[w(A\otimes B)]$
\end_inset

 again where 
\begin_inset Formula $A,B$
\end_inset

 are two english letters encoded in ASCII.
 We compute this value in associated python script and find its value to
 be 2.36.
 So how does this help us? Let us first make the assumption that the key
 is composed of some number of uniformly random bytes.
 Now let 
\begin_inset Formula $\widetilde{A}=A\otimes K$
\end_inset

 where 
\begin_inset Formula $K$
\end_inset

 is one of the random bytes in the key.
 Similarly 
\begin_inset Formula $\widetilde{B}=B\otimes K$
\end_inset

, so 
\begin_inset Formula $A,B$
\end_inset

 are the plain text and 
\begin_inset Formula $\widetilde{A},\widetilde{B}$
\end_inset

 are the cipher text.
 Suppose 
\begin_inset Formula $A,B$
\end_inset

 are encoded using the same byte from the key.
 Then we have the follwoing: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{E}[w(\widetilde{A}\otimes\widetilde{B})]=\mathbb{E}[w(A\otimes K\otimes B\otimes K)]=\mathbb{E}[w(X\otimes Y)]=2.36
\]

\end_inset


\end_layout

\begin_layout Standard
Now in contrats, suppose they were encoded using different random bytes
 from the key.
 Say these key bytes are 
\begin_inset Formula $K,K'$
\end_inset

.
 Then we can apply the fact that XOR-ing and taking the weight of uniformly
 random byte with another byte produces an expected value of 4.
 To see this let 
\begin_inset Formula $C=A\otimes B$
\end_inset

 and 
\begin_inset Formula $X=K\otimes K'$
\end_inset

.
 We know 
\begin_inset Formula $X$
\end_inset

 is uniformly random and thus we have the following.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{E}[w(\widetilde{A}\otimes\widetilde{B})]=\mathbb{E}[w(A\otimes K\otimes B\otimes K')]=\mathbb{E}[w(X\otimes C)]=4
\]

\end_inset


\end_layout

\begin_layout Standard
This gives us a fairly straight forward statistical test to determine the
 key size.
 We generate a list of reasonable key sizes.
 For each key size, we compute 
\begin_inset Formula $\mathbb{E}[w(\widetilde{A}\otimes\widetilde{B})]$
\end_inset

 over the entire cipher text where 
\begin_inset Formula $\widetilde{B}$
\end_inset

 is key size bytes away from 
\begin_inset Formula $\widetilde{A}$
\end_inset

.
 If the guessed key size is correct, then these two cipher text bytes were
 encoded with the same key byte and should yield an expected weight of 2.36.
 If not, then we should see an expected weight of 4.
 Thus we now have a way of computing the correct key size, this procedure
 is coded in python in the file repeat_key_xor.py
\end_layout

\begin_layout Section
Breaking the Cipher
\end_layout

\begin_layout Standard
At this point we know the key length.
 Now to break the cipher is really straight forward.
 Take each byte in the cipher text that we know to be encoded with the same
 key byte put them in the same array or bin.
 For each bin, we brute force all possible key bytes by XORing that possible
 key byte with the cipher text characters in the bin.
 This produces a bin of possible plain text.
 The correct key byte should produce a bin whose possible plain text bin
 that roughly follows the english character letter distribution.
 Do this for all key bytes and we have broken the cipher.
\end_layout

\end_body
\end_document
