#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\begin_modules
theorems-std
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Pseudo Random Number Generators
\end_layout

\begin_layout Abstract
In this document we look over several pseudo random number generators (prng).
 These prng's are import in several cyrptographic algorithms including stream
 ciphers, counter mode encryption, and in nonce value production.
 We will start with simpliest and first developed prng's and move to more
 complicated ones.
 This document assumes a familiarity with modular arithmetic, geometric
 sequence and series, basic cryptographic concepts, and the Euclidean algorithm.
\end_layout

\begin_layout Section
Linear Congruent Generator (LCG)
\end_layout

\begin_layout Subsection
Definition
\end_layout

\begin_layout Itemize
\begin_inset Formula $a,c,m,x_{0}$
\end_inset

 are predefined inputs.
\end_layout

\begin_layout Itemize
All arithemtic is done over the positive integers modulo 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Itemize
The recurrence relation defining the number generation is given by 
\begin_inset Formula $x_{i}=(ax_{i-1}+c)$
\end_inset

 mod 
\begin_inset Formula $m$
\end_inset

.
\end_layout

\begin_layout Itemize
The maximum period length is 
\begin_inset Formula $m$
\end_inset

.
 Since there are only 
\begin_inset Formula $m$
\end_inset

 possible inputs and the output of the generator only depends on the previous
 value, once the generator has outputted all 
\begin_inset Formula $m$
\end_inset

 values, when it hits a value its already outputted it will repeat.
\end_layout

\begin_layout Subsection
Properties
\end_layout

\begin_layout Standard
So how do we set these values, 
\begin_inset Formula $a,c,m,x_{0}$
\end_inset

, such that we get a suffiecntly 
\begin_inset Quotes eld
\end_inset

random
\begin_inset Quotes erd
\end_inset

 output? Some choices of these parameters yield these than largest possible
 period so how do we garentee a full period? Answering these questions requires
 significant theory.
 However we will simply provide resources for the interested reader to follow.
 There is a theorem called the Hull-Dobel Theorem 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

 which states the following.
\end_layout

\begin_layout Theorem
The LCG has a full period if and only if 
\end_layout

\begin_layout Theorem
(a) 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 are relatively prime
\end_layout

\begin_layout Theorem
(b) 
\begin_inset Formula $a=1$
\end_inset

 mod 
\begin_inset Formula $p$
\end_inset

 for all prime factors 
\begin_inset Formula $p$
\end_inset

 of 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Theorem
(d) 
\begin_inset Formula $a=1$
\end_inset

 mod 4 if 4 is a factor of 
\begin_inset Formula $m$
\end_inset


\end_layout

\begin_layout Standard
The proof of this theorem is found in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"
literal "false"

\end_inset

 where this generator was first introduced.
 However, not all choices of these prameters provide 
\begin_inset Quotes eld
\end_inset

random looking
\begin_inset Quotes erd
\end_inset

 sequences.
 For example if 
\begin_inset Formula $a=c=1$
\end_inset

, then you just get a sequence that increments by 1 on each iteration.
 The texts 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2,key-3"
literal "false"

\end_inset

 provide an overview of the theory, some statitical tests, and some actual
 good choices of these parameters that lead to good 
\begin_inset Quotes eld
\end_inset

random
\begin_inset Quotes erd
\end_inset

 sequences.
\end_layout

\begin_layout Subsection
How to Break LCG
\end_layout

\begin_layout Standard
Now the part that we are interested.
 Since we are interested in the cryptographic properties of the LCG, or
 in this case lack there of, if we know that a cyrptographic algorithm is
 using the LCG under what condtions can we break it? Suppose one implements
 a naive stream encoder where each word of the plain text is simply XOR-ed
 with an LCG generator.
 The shared secret between the parties are the parameters of the LCG.
 In this case the word size is just that of 
\begin_inset Formula $\log m$
\end_inset

, so if 
\begin_inset Formula $m=2^{32}$
\end_inset

, the word size is 32 bits.
 It turns out all we need is all we need it 3 sequential pieces of ciphertext
 and known plain text to break this encyption scheme.
 An example of where this could used is suppose we know that they are encrypting
 some data structure with a known header that is at least 3 words long.
 Thus we can take the known cipher and plain text and reproduce the random
 sequence used.
 Once we have that we just need to solve the following congruential linear
 system:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{cases}
x_{1}=ax_{0}+c & x_{2}=ax_{1}+c\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Subtracting the two equations gives us a congruential equation 
\begin_inset Formula $a=(x_{1}-x_{2})*(x_{0}-x_{1})^{-1}$
\end_inset

 and 
\begin_inset Formula $c=x_{2}-ax_{1}$
\end_inset

.
 Solving this requires finding the inverse of 
\begin_inset Formula $(x_{0}-x_{1})^{-1}$
\end_inset

 using the extened Euclidean algorithm.
 This has a solution given 
\begin_inset Formula $(x_{0}-x_{1})^{-1}$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 are relatively prime.
 Thus we can break the LCG with relative ease which makes this bad choice
 for use in cryptographic algoritms.
\end_layout

\begin_layout Section
Linear Feedback Shift Register (LFSR)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Hull, T.
 E.; Dobell, A.
 R.
 (July 1962).
 "Random Number Generators".
 SIAM Review.
 4 (3): 230–254.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Knuth, Donald (1997).
 Seminumerical Algorithms.
 The Art of Computer Programming.
 Vol.
 2 (3rd ed.).
 Reading, MA: Addison-Wesley Professional.
 pp.
 10–26.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Steele, Guy; Vigna, Sebastiano (15 January 2020).
 "Computationally easy, spectrally good multipliers for congruential pseudorando
m number generators".
 arXiv:2001.05304
\end_layout

\end_body
\end_document
